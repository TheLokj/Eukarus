workDir = '/hps/nobackup/rdf/metagenomics/service-team/users/louison/nextflow/tmpwork/'

params {
    catDB = "/hps/nobackup/rdf/metagenomics/service-team/ref-dbs/cat/CAT_prepare_20210107/2021-01-07_CAT_database/"
    diamondDB = "/hps/nobackup/rdf/metagenomics/service-team/ref-dbs/cat/CAT_prepare_20210107/Diamond_2.0.6/diamond"
    taxonomyDB = "/hps/nobackup/rdf/metagenomics/service-team/ref-dbs/cat/CAT_prepare_20210107/2021-01-07_taxonomy/"
    tiaraVersion = "1.0.3"
    dmcVersion = "1.0.3"
}

process {
    
    // When updating the container, please be careful and update also the above related version parameters
    withName: 'PREDICT_TIARA' {
        container = '/hps/nobackup/rdf/metagenomics/service-team/users/louison/nextflow/project/bin/tiara1.0.3.sif'
    }
     withName: 'PREDICT_DEEPMICROCLASS' {
        container = '/hps/nobackup/rdf/metagenomics/service-team/users/louison/nextflow/project/bin/deepmicroclass1.0.3.sif'
    }
     withName: 'PREDICT_CAT' {
        container = '/hps/nobackup/rdf/metagenomics/service-team/singularity-cache/quay.io_microbiome-informatics_cat:5.2.3.sif'
    }
     withName: 'ADD_NAMES_CAT' {
        container = '/hps/nobackup/rdf/metagenomics/service-team/singularity-cache/quay.io_microbiome-informatics_cat:5.2.3.sif'
    }

    withLabel: 'light' {
        cpus = 1
        memory = { 3.GB * task.attempt }
        time   = { 1.h  * task.attempt }
        errorStrategy = { task.exitStatus == 137 ? 'retry' : 'finish' }
        maxRetries = 2
    }
    withLabel: 'medium' {
        cpus = 2
        memory = { 8.GB * task.attempt }
        time   = { 4.h  * task.attempt }
        errorStrategy = { task.exitStatus == 137 ? 'retry' : 'finish' }
        maxRetries = 2
    }
    withLabel: 'heavy' {
        cpus = 8
        memory = { 16.GB + (8.GB * (task.attempt-1)) }
        time   = { 12.h  * task.attempt }
        errorStrategy = { task.exitStatus == 137 ? 'retry' : 'finish' }
        maxRetries = 2
    }
    withLabel: 'superheavy' {
        cpus = 16
        memory = { 48.GB + (8.GB * (task.attempt-1)) }
        time   = { 12.h  * task.attempt }
        errorStrategy = { task.exitStatus == 137 ? 'retry' : 'finish' }
        maxRetries = 2
    }

}