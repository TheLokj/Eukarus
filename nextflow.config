profiles {
    
    test {
        includeConfig "configs/test.config"
    }

    ebi_slurm {

        includeConfig 'configs/codon.config'

        executor {
            name = "slurm"
            queueSize = 100
            queueGlobalStatus = true
            submitRateLimit = "10 sec"
            pollInterval = "10 sec"
        }
    }
}

singularity {
    enabled = true
}

// nf-core function to ensure that resource requirements don't go beyond
// a maximum limit

params {
    max_memory                 = '200.GB'
    max_cpus                   = 16
    max_time                   = '240.h'
}

def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}